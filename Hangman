# Hangman by Luke Clements and James Cloney
def letter_counter(encoded_word):
    """ counts the amount of each letter in a word with the set variable of encoded_word always being the same thing input"""
    index = 0
    let_count = 0
    letter_count = {}
    for letter in encoded_word:  # goes through each letter of the list
        let_count = 0
        for let in encoded_word:  # goes through each letter of the list
            if letter == let:  # compares the two letters if same adds one to count total
                let_count += 1
        letter_count[letter] = let_count
    return (letter_count)


def letter_display(y, word):
    """Put the letter in the right place for the display and word is a set input"""
    count = 1
    index = 0
    while count <= len(word):
        n = -90
        x = 0
        if y == word[index]:
            turtle.penup()
            while x < index:
                n += 35
                x += 1
            turtle.goto((n), -50)
            turtle.write(y, font=(24))
        index += 1
        count += 1


lives = 6
# life count
words_list = ["able", "about", "account", "acid", "across", "act", "addition", "adjustment", "advertisement", "after",
              "again", "against", "agreement", "air", "all", "almost", "among", "amount", "amusement", "and", "angle",
              "angry", "animal",
              "answer", "ant", "any", "apparatus", "apple", "approval", "arch", "argument", "arm", "army", "art", "as",
              "at", "attack", "attempt", "attention", "attraction", "authority", "automatic", "awake", "baby", "back",
              "bad", "bag",
              "balance", "ball", "band", "base", "basin", "basket", "bath", "be", "beautiful", "because", "bed", "bee",
              "before", "behaviour", "belief", "bell", "bent", "berry", "between", "bird", "birth", "bit", "bite",
              "bitter", "black", "blade",
              "blood", "blow", "blue", "board", "boat", "body", "boiling", "bone", "book", "boot", "bottle", "box",
              "boy", "brain", "brake", "branch", "brass", "bread", "breath", "brick", "bridge", "bright", "broken",
              "brother", "brown", "brush",
              "bucket", "building", "bulb", "burn", "burst", "business", "but", "butter", "button", "by", "cake",
              "camera", "canvas", "card", "care", "carriage", "cart", "cat", "cause", "certain", "chain", "chalk",
              "chance", "change", "cheap", "cheese",
              "chemical", "chest", "chief", "chin", "church", "circle", "clean", "clear", "clock", "cloth", "cloud",
              "coal", "coat", "cold", "collar", "colour", "comb", "come", "comfort", "committee", "common", "company",
              "comparison", "competition",
              "complete", "complex", "condition", "connection", "conscious", "control", "cook", "copper", "copy",
              "cord", "cork", "cotton", "cough", "country", "cover", "cow", "crack", "credit", "crime", "cruel",
              "crush", "cry", "cup", "current",
              "curtain", "curve", "cushion", "damage", "danger", "dark", "daughter", "day", "dead", "dear", "death",
              "debt", "decision", "deep", "degree", "delicate", "dependent", "design", "desire", "destruction",
              "detail", "development", "different",
              "digestion", "direction", "dirty", "discovery", "discussion", "disease", "disgust", "distance",
              "distribution", "division", "do", "dog", "door", "doubt", "down", "drain", "drawer", "dress", "drink",
              "driving", "drop", "dry", "dust", "ear", "early",
              "earth", "east", "edge", "education", "effect", "egg", "elastic", "electric", "end", "engine", "enough",
              "equal", "error", "even", "event", "ever", "every", "example", "exchange", "existence", "expansion",
              "experience", "expert", "eye", "face",
              "fact", "fall", "false", "family", "far", "farm", "fat", "father", "fear", "feather", "feeble", "feeling",
              "female", "fertile", "fiction", "field", "fight", "finger", "fire", "first", "fish", "fixed", "flag",
              "flame", "flat", "flight", "floor", "flower",
              "fly", "fold", "food", "foolish", "foot", "for", "force", "fork", "form", "forward", "fowl", "frame",
              "free", "frequent", "friend", "from", "front", "fruit", "full", "future", "garden", "general", "get",
              "girl", "give", "glass", "glove", "go",
              "goat", "gold", "good", "government", "grain", "grass", "great", "green", "grey", "grip", "group",
              "growth", "guide", "gun", "hair", "hammer", "hand", "hanging", "happy", "harbour", "hard", "harmony",
              "hat", "hate", "have", "he", "head", "healthy",
              "hear", "hearing", "heart", "heat", "help", "high", "history", "hole", "hollow", "hook", "hope", "horn",
              "horse", "hospital", "hour", "house", "how", "humour", "I", "ice", "idea", "if", "ill", "important",
              "impulse", "in", "increase", "industry", "ink",
              "insect", "instrument", "insurance", "interest", "invention", "iron", "island", "jelly", "jewel", "join",
              "journey", "judge", "jump", "keep", "kettle", "key", "kick", "kind", "kiss", "knee", "knife", "knot",
              "knowledge", "land", "language", "last",
              "late", "laugh", "law", "lead", "leaf", "learning", "leather", "left", "leg", "let", "letter", "level",
              "library", "lift", "light", "like", "limit", "line", "linen", "lip", "liquid", "list", "little", "living",
              "lock", "long", "look", "loose", "loss",
              "loud", "love", "low", "machine", "make", "male", "man", "manager", "map", "mark", "market", "married",
              "mass", "match", "material", "may", "meal", "measure", "meat", "medical", "meeting", "memory", "metal",
              "middle", "military", "milk", "mind",
              "mine", "minute", "mist", "mixed", "money", "monkey", "month", "moon", "morning", "mother", "motion",
              "mountain", "mouth", "move", "much", "muscle", "music", "nail", "name", "narrow", "nation", "natural",
              "near", "necessary", "neck", "need", "needle",
              "nerve", "net", "new", "news", "night", "no", "noise", "normal", "north", "nose", "not", "note", "now",
              "number", "nut", "observation", "of", "off", "offer", "office", "oil", "old", "on", "only", "open",
              "operation", "opinion", "opposite", "or",
              "orange", "order", "organization", "ornament", "other", "out", "oven", "over", "owner", "page", "pain",
              "paint", "paper", "parallel", "parcel", "part", "past", "paste", "payment", "peace", "pen", "pencil",
              "person", "physical", "picture", "pig",
              "pin", "pipe", "place", "plane", "plant", "plate", "play", "please", "pleasure", "plough", "pocket",
              "point", "poison", "polish", "political", "poor", "porter", "position", "possible", "pot", "potato",
              "powder", "power", "present", "price",
              "print", "prison", "private", "probable", "process", "produce", "profit", "property", "prose", "protest",
              "public", "pull", "pump", "punishment", "purpose", "push", "put", "quality", "question", "quick", "quiet",
              "quite", "rail", "rain", "range",
              "rat", "rate", "ray", "reaction", "reading", "ready", "reason", "receipt", "record", "red", "regret",
              "regular", "relation", "religion", "representative", "request", "respect", "responsible", "rest",
              "reward", "rhythm", "rice", "right", "ring",
              "river", "road", "rod", "roll", "roof", "room", "root", "rough", "round", "rub", "rule", "run", "sad",
              "safe", "sail", "salt", "same", "sand", "say", "scale", "school", "science", "scissors", "screw", "sea",
              "seat", "second", "secret", "secretary",
              "see", "seed", "seem", "selection", "self", "send", "sense", "separate", "serious", "servant", "sex",
              "shade", "shake", "shame", "sharp", "sheep", "shelf", "ship", "shirt", "shock", "shoe", "short", "shut",
              "side", "sign", "silk", "silver",
              "simple", "sister", "size", "skin", "skirt", "sky", "sleep", "slip", "slope", "slow", "small", "smash",
              "smell", "smile", "smoke", "smooth", "snake", "sneeze", "snow", "so", "soap", "society", "sock", "soft",
              "solid", "some", "son", "song",
              "sort", "sound", "soup", "south", "space", "spade", "special", "sponge", "spoon", "spring", "square",
              "stage", "stamp", "star", "start", "statement", "station", "steam", "steel", "stem", "step", "stick",
              "sticky", "stiff", "still", "stitch",
              "stocking", "stomach", "stone", "stop", "store", "story", "straight", "strange", "street", "stretch",
              "strong", "structure", "substance", "such", "sudden", "sugar", "suggestion", "summer", "sun", "support",
              "surprise", "sweet", "swim", "system",
              "table", "tail", "take", "talk", "tall", "taste", "tax", "teaching", "tendency", "test", "than", "that",
              "the", "then", "theory", "there", "thick", "thin", "thing", "this", "thought", "thread", "throat",
              "through", "thumb", "thunder", "ticket",
              "tight", "till", "time", "tin", "tired", "to", "toe", "together", "tomorrow", "tongue", "tooth", "top",
              "touch", "town", "trade", "train", "transport", "tray", "tree", "trick", "trouble", "trousers", "true",
              "turn", "twist", "umbrella", "under",
              "unit", "up", "use", "value", "verse", "very", "vessel", "view", "violent", "voice", "waiting", "walk",
              "wall", "war", "warm", "wash", "waste", "watch", "water", "wave", "wax", "way", "weather", "week",
              "weight", "well", "west", "wet", "wheel", "when",
              "where", "while", "whip", "whistle", "white", "who", "why", "wide", "will", "wind", "window", "wine",
              "wing", "winter", "wire", "wise", "with", "woman", "wood", "wool", "word", "work", "worm", "wound",
              "writing", "wrong", "year", "yellow", "yes",
              "yesterday", "you", "young", "Bernhard", "Breytenbach", "Android"
              ]
from random import randint
words = words_list[randint(0, 849)]

word = list(words)
later=list(words)
#print(word)
import turtle # Title for the turtle canvas
turtle.title("Hangman by Luke and James")
# setting the screen size by pixels and starting point of turtle
turtle.setup(250, 250, 175, 15)
turtle.hideturtle()
turtle.left(180)        #makes the hang man stand
turtle.forward(100)
turtle.left(90)
turtle.forward(5)
turtle.left(90)
turtle.forward(100)
turtle.left(90)
turtle.forward(5)
turtle.penup()
turtle.left(90)
turtle.forward(100)
turtle.back(45)     # bottom base
turtle.forward(20)
turtle.right(135)
turtle.pendown()
turtle.forward(32.01562118716)
turtle.right(135)
turtle.forward(5)
turtle.right(45)
turtle.forward(25)
turtle.right(45)
turtle.forward(5)
turtle.right(135)
turtle.pendown()
turtle.forward(32.01562118716)
turtle.right(135)
turtle.forward(22)  # first strut
turtle.right(180)
turtle.forward(125)
turtle.right(90)
turtle.forward(10)
turtle.right(90)
turtle.forward(127)
turtle.right(90)
turtle.penup()
turtle.forward(10)
turtle.right(90)
turtle.forward(127)
turtle.right(90)
turtle.forward(85)
turtle.right(90)
turtle.forward(5)
turtle.left(90)
turtle.pendown()
turtle.left(180)
turtle.forward(75)
turtle.right(90)
turtle.forward(5)
turtle.right(90)
turtle.forward(75)
turtle.right(90)
turtle.forward(5)
turtle.right(90)
turtle.penup()
turtle.forward(50)
turtle.left(45)
turtle.pendown()
turtle.forward(35.01562118716)
turtle.right(135)
turtle.forward(5)
turtle.right(45)
turtle.forward(30)
turtle.penup()
turtle.left(135)
turtle.forward(20)
turtle.right(90)
turtle.forward(5)
turtle.right(90)
turtle.forward(75)
turtle.right(90)
#second strut and overhang piece
turtle.pendown()
turtle.forward(28)
turtle.left(90)
turtle.penup()
turtle.forward(5)
turtle.goto(-100,-50)
for _ in range (0, len(word)):      #display the number of letters
    turtle.pendown()
    turtle.forward(20)
    turtle.penup()
    turtle.forward(15)
    turtle.pendown()
turtle.penup()
turtle.goto(39,100)
turtle.pendown()
# turtle.exitonclick()


coder = {"a": 1, "b": 2, "c": 3, "d": 4, "e": 5, "f": 6, "g": 7, "h": 8, "i": 9, "j": 10, "k": 11, "l": 12, "m": 13,
         "n": 14, "o": 15, "p": 16, "q": 17, "r": 18, "s": 19, "t": 20, "u": 21, "v": 22, "w": 23, "x": 24, "y": 25,
         "z": 26}
decoder = {1: "a", 2: "b", 3: "c", 4: "d", 5: "e", 6: "f", 7: "g", 8: "h", 9: "i", 10: "j", 11: "k", 12: "l", 13: "m",
           14: "n", 15: "o", 16: "p", 17: "q", 18: "r", 19: "s", 20: "t", 21: "u", 22: "v", 23: "w", 24: "x", 25: "y",
           26: "z"}
encoded_word = []
for character in word:
     #print(character)
    encoded_word.append(coder[character])  # changes the letter to assigned number
#print(encoded_word)
letter_code = letter_counter(encoded_word)
#print(letter_code)
# encodes guess and check if in list

guess1 = False
ans = []
while guess1 == False:
    if ans.sort() == word.sort() and len(ans) == len(word):
        print("You have ONE chance to guess the word using the correct letters you have guessed so far",
              ans, )  # one chance to guess the word with
        final_chance = str(input("Try guess the word: "))  # all the letters.
        if final_chance == words:
            print("Congratulatuion you guessed the word correctly."
                  "The word was", words, )
            print("Game over You win")
            break
        elif final_chance != words:
            print("Game Over You lose")
            print("The word was", words)
            guess1 = True
            break
    while True:
        try:
            y = input(str("Enter a letter here: ")).lower()
            x = coder[y]
            break
        except KeyError:
            print("oops, That's not a valid character. Try again!"
                  "Please only enter single one by one")

            #   print(y)
    if x in encoded_word:
        print(decoder[x], "is in the word")
        count =1
        #print(word)
        #print(later)
        letter_display (y,later)


        while count <= letter_code[
            x]:  # check for letter code to see amount of letters if word and adds that many answer list
            ans.append(y)
            count += 1
            #    print(ans)

    elif x not in encoded_word:
        lives -= 1
        if lives == 5:
            print("hard luck", y, "is not in the word")
            turtle.goto(39, 100)
            turtle.pendown()
            for _ in range(0, 8):
                turtle.right(45)
                turtle.forward(10)
            print("You have", lives, "left")

        if lives == 4:
            print("hard luck", y, "is not in the word")
            turtle.goto(39,100)
            turtle.penup()
            turtle.back(5)
            turtle.right(90)
            turtle.forward(25)
            turtle.pendown()
            turtle.forward(50)
            print("You have", lives, "left")

        if lives == 3:
            print("hard luck", y, "is not in the word")
            turtle.goto(34,25)
            turtle.pendown()
            turtle.left(45)
            turtle.forward(25)
            turtle.penup()
            turtle.back(25)
            turtle.right(90)
            turtle.pendown()

            print("You have", lives, "left")

        if lives == 2:
            print("hard luck", y, "is not in the word")
            turtle.goto(34, 25)
            turtle.pendown()
            turtle.forward(25)
            turtle.penup()
            turtle.back(25)
            turtle.right(45)
            turtle.right(90)
            turtle.forward(35)
            turtle.left(90)
            print("You have", lives, "left")

        if lives == 1:
            print("hard luck", y, "is not in the word")
            turtle.goto(34, 65)
            turtle.pendown()
            turtle.forward(17)
            turtle.penup()
            turtle.back(17)
            turtle.right(180)
            print("You have", lives, "left")

        if lives == 0:
            print("hard luck", y, "is not in the word")
            turtle.goto(34, 65)
            turtle.pendown()
            turtle.forward(17)
            print("last Guess")

        if lives <= -1:
            print("Last chance from the letters you havr guessed so far", ans, )
            final_chance = str(input("try guess the word: "))
            if final_chance == words:
                print("Congratulatuion you guessed the word correctly."
                      "The word was", words, )
                print("Game over You win")
                break
            elif final_chance != word:
                turtle.penup()
                turtle.goto(250, 250)
                print("Game Over You lose")
                break
turtle.exitonclick()
